<?xml version='1.0' encoding="UTF-8"?>
<!-- $Id: README.sdoc 75 2006-03-02 11:11:02Z kubo $ -->
<doc xml:lang="ja">
  <head>
    <title locale="ja">Piece_Unity - PHPのためのステートフルでセキュアなMVCフレームワーク</title>
    <title locale="en">Piece_Unity - A stateful and secure MVC framework for PHP</title>
    <author>KUBO Atsuhiro &lt;iteman@users.sourceforge.net&gt;</author>
    <date>2006-06-21</date>
  </head>
  <body>
    <section>
      <title locale="ja">はじめに</title>
      <title locale="en">Introduction</title>

      <p locale="ja">Piece_UnityはPHPのためのステートフルでセキュアなMVCフレームワークです。Piece_Unityには2つの主要な特徴があります。ひとつは継続サーバとして知られている技術〜それはPiece_Flow Webフローエンジンに基づいています〜を使ったフロー制御、そして状態の保存と復元です。もうひとつはEclipseライクな拡張ポイントと設定ポイントを使ったプラグインシステムです。</p>

      <p locale="en">Piece_Unity is a stateful and secure MVC framework for PHP. Piece_Unity has two major features. The first one is a technology known as continuation server - It based on Piece_Flow web flow engine, flow control using it, and storing/restoring states. The second one is an Eclipse like plug-in system using extension points and configuration points.</p>
    </section>

    <section>
      <title locale="ja">Piece_Unityの特徴</title>

      <subsection>
        <title locale="ja">継続サーバ</title>

        <p locale="ja">Piece_UnityはPiece_Flow Webフローエンジンに基づいた継続サーバを提供します。継続サーバを使うことで、開発者はステートフルなプログラミングモデルを獲得し、アプリケーションは妥当でないリクエストに対して高いセキュリティを獲得します。</p>

        <subsubsection>
          <title locale="ja">ステートフルなプログラミングモデル</title>

          <p locale="ja">従来のWebアプリケーションはHTTPプロトコルの特性と同じくステートレスなプログラミングモデルによって開発されてきました。ステートレスなプログラミングモデルでは、アプリケーションやフローの状態を開発者自身が管理しなければならないため、アプリケーションの問題領域以外のプログラミングコストが高くつきます。従来のWebアプリケーションフレームワークの場合、ひとつのフローを複数のアクションで構成することはめずらしくありませんが、フローの最初のアクション以外のアクションは開発者自身が妥当なリクエストかどうか判断しなければなりません。開発者(及びアプリケーション)は二重投稿、ブラウザの戻るボタン、不正なHTTPリクエスト、複数ウインドウ等への対策を常に考慮する必要があり、これらは苦痛ともいえるものです。Piece_Unityは継続サーバを使うことで、これらの問題の一切を開発者から取り払います。</p>

          <p locale="ja">Piece_Unityを使ったステートフルなプログラミングは、ひとつまたは複数のフロー定義ファイルとフローの各状態が受け付け可能なイベントに対するコールバック関数の組み合わせで構成されます。これはMicrosoftのVisual BasicやBorlandのDelphiに代表される従来のWindowsアプリケーション開発モデルと似通っています。フォームのボタンはイベントを発生し、実行環境はイベントに対応したコールバック関数を呼び出します。</p>
        </subsubsection>
      </subsection>

      <subsection>
        <title locale="ja">プラグインシステム</title>

        <p locale="ja"></p>
      </subsection>
    </section>

    <section>
      <title locale="ja">チュートリアル</title>

      <subsection>
        <title locale="ja">アプリケーションに最適な継続サーバの動作モードの選択</title>
      </subsection>
    </section>
  </body>
</doc>
